//
//  DashboardPresenter.swift
//  Nar_Hub
//
//  Created by Sevar Jafarli on 23.01.24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NarHubNetworkKit

protocol DashboardPresentationLogic
{
    func presentStories(response: Dashboard.FetchStories.Response)
    func presentHubServices(response: Dashboard.FetchHubs.Response)
    func presentLoad(response: Dashboard.Load.Response)
}

class DashboardPresenter: DashboardPresentationLogic {
    
    weak var viewController: DashboardDisplayLogic?

    func presentStories(response: Dashboard.FetchStories.Response) {
        guard let storiesList = response.stories.list else {
            return
        }
        var storyModels: [StoryModel] = []
        
        for story in storiesList {
            storyModels.append(StoryModel(id: story.id ?? 0, title: story.title ?? "", url: story.url ?? ""))
        }
        
        let viewModel = Dashboard.FetchStories.ViewModel(storiesList: storyModels)
        
        viewController?.displayStories(viewModel: viewModel)
    }
    
    func presentHubServices(response: Dashboard.FetchHubs.Response) {
        
        guard let servicesList = response.hubServices.list else {
            return
        }
        var serviceModels: [HubModel] = []
        
        for service in servicesList {
            serviceModels.append(HubModel(title: service.title ??  "", id: service.id ?? 0))
        }

        let viewModel = Dashboard.FetchHubs.ViewModel(servicesList: serviceModels)
        
        viewController?.displayHubServices(viewModel: viewModel)
    }
    
    func presentLoad(response: Dashboard.Load.Response) {
        let viewModel = Dashboard.Load.ViewModel()
        viewController?.displayLoad(viewModel: viewModel)
    
    }
}
