//
//  DashboardInteractor.swift
//  Nar_Hub
//
//  Created by Sevar Jafarli on 23.01.24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NarHubNetworkKit
import RealmSwift

protocol DashboardBusinessLogic {
    func fetchStories(request: Dashboard.FetchStories.Request)
    
    func load(request: Dashboard.Load.Request)
    
    func fetchHubs(request: Dashboard.FetchHubs.Request)
}

protocol DashboardDataStore {
    //var name: String { get set }
}

class DashboardInteractor: DashboardBusinessLogic, DashboardDataStore {
    
    var presenter: DashboardPresentationLogic?
    lazy var worker: DashboardWorkingLogic = DashboardWorker()
    
    
    var hubServices: HubResponse?
    var stories: StoriesResponse?
    
    func fetchStories(request: Dashboard.FetchStories.Request) {
        worker.fetchStories({ [weak self] data in
            guard let self = self else { return }
            
            if let data = data {
                self.stories = data
                let response = Dashboard.FetchStories.Response( stories: data)
                self.presenter?.presentStories(response: response)
            }
        })
    }
    
    func fetchHubs(request: Dashboard.FetchHubs.Request) {
        let hubModelsFromCache: Results<HubModel> = CacheManager.shared.readData()
        let hubModelsArray: [HubModel] = Array(hubModelsFromCache)

    
        guard Connectivity.isConnectedToInternet() else {
            var hubServices = [Hub]()
            for hub in hubModelsArray {
                hubServices.append(Hub(id: hub.id, title: hub.title))
            }
            
            let data = HubResponse(list: hubServices)
            let response = Dashboard.FetchHubs.Response(hubServices: data)
            self.presenter?.presentHubServices(response: response)
            return
        }
        
        worker.fetchHubServices({ [weak self] data in
            guard let self = self else { return }
       
            if let data = data {
                self.hubServices = data
                var hubArray = [HubModel]()
                
                if let hubList = self.hubServices?.list {
                   
                    for hub in hubList {
                        let hubModel = HubModel(title: hub.title ?? "", id: hub.id ?? 0)
                        hubArray.append(hubModel)
                        if hubArray != hubModelsArray {
                            CacheManager.shared.saveData(data: hubModel)
                        }
                    }
                }
            
                let response = Dashboard.FetchHubs.Response(hubServices: data)
                self.presenter?.presentHubServices(response: response)
            }
        })
    }
    
    func load(request: Dashboard.Load.Request) {
        let response = Dashboard.Load.Response()
        self.presenter?.presentLoad(response: response)
    }
}



