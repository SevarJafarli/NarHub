//
//  FreeSMSView.swift
//  Nar_Hub
//
//  Created by Sevar Jafarli on 25.01.24.
//  Copyright (c) 2024 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit
import NarHubUIKit

protocol FreeSMSViewDelegate: AnyObject {
    func openContacts()
}

class FreeSMSView: UIView {
    
    weak var delegate: FreeSMSViewDelegate?
    
    lazy var scrollView: UIScrollView = {
        let view = UIScrollView()
        view.showsVerticalScrollIndicator = false
        return view
    }()
    
    lazy var contentView: UIView = {
        let view = UIView()
        return view
    }()
    
    lazy var contentHStackView: UIStackView = {
        let view = UIStackView()
        view.axis = .vertical
        view.spacing = 8
        return view
    }()
    
    lazy var loadingIndicator: LoadingActivityIndicator = {
        let indicator = LoadingActivityIndicator()
        return indicator
    }()
    
    lazy var dailySMSView: DailySMSLimitView = {
        let view = DailySMSLimitView()
        view.isHidden = true
        return view
    }()
    
    lazy var messageTitleLabel: UILabel = {
        let lbl = UILabel()
        lbl.text = "Mesaj"
        lbl.font = AppFonts.boldTitleSize18.fontStyle
        lbl.textColor = .black
        return lbl
    }()
    
    lazy var phoneNumberTextField: PhoneNumberTextFieldView = {
        let view = PhoneNumberTextFieldView()
        view.delegate = self
        return view
    }()
    
    
    lazy var messageTextView: MessageTextView = {
        let view = MessageTextView()
        view.viewDelegate = self
        return view
    }()
    
    lazy var sendButton: LargeFilledButton = {
        let btn = LargeFilledButton(isButtonEnabled: false, title: "Göndər")
        btn.delegate = self
        return btn
    }()
    
    private func addConstraints() {
        self.scrollView.snp.updateConstraints { make in
            make.top.leading.trailing.equalToSuperview()
            make.bottom.equalTo(self.sendButton.snp.top).offset(-16)
        }
        
        self.contentView.snp.updateConstraints { make in
            make.edges.equalToSuperview()
            make.width.equalTo(self.scrollView)
        }
        
        self.contentHStackView.snp.updateConstraints { make in
            make.top.equalToSuperview().offset(16)
            make.leading.trailing.equalToSuperview().inset(16)
            make.bottom.equalToSuperview()
        }
        
        self.messageTextView.snp.updateConstraints { make in
            make.height.equalTo(184)
        }
        
        self.sendButton.snp.updateConstraints { make in
            make.bottom.equalTo(safeAreaLayoutGuide).offset(-12)
            make.height.equalTo(56)
            make.leading.trailing.equalToSuperview().inset(16)
        }
    }
    
    private func addSubviews() {
        self.contentHStackView.addArrangedSubview(self.loadingIndicator)
        self.contentHStackView.addArrangedSubview(self.dailySMSView)
        self.contentHStackView.addArrangedSubview(self.messageTitleLabel)
        self.contentHStackView.addArrangedSubview(self.phoneNumberTextField)
        self.contentHStackView.addArrangedSubview(self.messageTextView)
        self.contentHStackView.addArrangedSubview(self.messageTextView)
        self.contentView.addSubview(self.contentHStackView)
        self.scrollView.addSubview(self.contentView)
        self.addSubview(self.scrollView)
        self.addSubview(self.sendButton)
    }
    
    
    private func setupUI() {
        self.backgroundColor = UIColor(named: ColorStyle.bgColor.rawValue)
    }
    
    //MARK: Init
    
    init() {
        super.init(frame: .zero)
        self.setupUI()
        self.addSubviews()
        self.addConstraints()
        self.updateSendButtonState()
    }
    
    required init?(coder: NSCoder) {
        fatalError("init(coder:) has not been implemented")
    }
}

//MARK: PhoneNumberTextFieldViewDelegate

extension FreeSMSView: PhoneNumberTextFieldViewDelegate {
    func textFieldDidTextChange(text: String) {
        self.updateSendButtonState()
    }
    func openContacts() {
        self.delegate?.openContacts()
    }
}
//MARK: MessageTextViewDelegate

extension FreeSMSView: MessageTextViewDelegate {
    func textViewDidChange(text: String) {
        self.updateSendButtonState()
        
        let messageCount = text.trimmingCharacters(in: .whitespacesAndNewlines).count
        self.messageTextView.smsCount.text = "\(messageCount)"
        
    }
    public func startLoading() {
        self.loadingIndicator.startLoading()
    }
    public func stopLoading() {
        self.loadingIndicator.stopLoading {
            self.dailySMSView.isHidden = false
        }
    }
}

//MARK: Send Button Tap

extension FreeSMSView: LargeFilledButtonDelegate {
    func onButtonTap(sender: UIButton) {
        if sender.isEnabled {
            print("Button tapped!")
        }
    }
    
    func updateSendButtonState() {
        if let
            phoneNumber = self.phoneNumberTextField.phoneTextField.text,
           !phoneNumber.isEmpty, phoneNumber.checkPhoneNumber(),
           let messageText = self.messageTextView.textView.text,
           !messageText.isEmpty
        {
            sendButton.changeButtonState(isEnabled: true)
        } else {
            sendButton.changeButtonState(isEnabled: false)
        }
    }
}
